<PRE>

MAGIC(5)                                                 MAGIC(5)

<H2>NAME</H2>
       magic - file command's magic number file

<H2>DESCRIPTION</H2>
       This manual page documents the format of the magic file as
       used by the <b>file</b>(1) command, version 3.22. The  <b>file</b>  com-
       mand  identifies  the  type  of  a file using, among other
       tests, a test for whether the file begins with  a  certain
       <i>magic</i>  <i>number</i>.   The  file  <i>/usr/local/etc/magic</i> specifies
       what magic numbers are to be tested for, what  message  to
       print  if  a  particular  magic number is found, and addi-
       tional information to extract from the file.

       Each line of the file specifies a test to be performed.  A
       test  compares the data starting at a particular offset in
       the file with a 1-byte, 2-byte, or 4-byte numeric value or
       a  string.   If  the  test succeeds, a message is printed.
       The line consists of the following fields:

       offset   A number specifying the offset,  in  bytes,  into
                the file of the data which is to be tested.

       type     The  type of the data to be tested.  The possible
                values are:

                byte     A one-byte value.

                short    A two-byte value (on  most  systems)  in
                         this machine's native byte order.

                long     A  four-byte  value (on most systems) in
                         this machine's native byte order.

                string   A string of bytes.

                date     A four-byte value interpreted as a  unix
                         date.

                beshort  A  two-byte  value  (on most systems) in
                         big-endian byte order.

                belong   A four-byte value (on most  systems)  in
                         big-endian byte order.

                bedate   A  four-byte  value (on most systems) in
                         big-endian byte order, interpreted as  a
                         unix date.

                leshort  A  two-byte  value  (on most systems) in
                         little-endian byte order.

                lelong   A four-byte value (on most  systems)  in
                         little-endian byte order.

                ledate   A  four-byte  value (on most systems) in
                         little-endian byte order, interpreted as
                         a unix date.

       The  numeric  types  may optionally be followed by <b>&</b> and a
       numeric value, to specify that the value is to  be  AND'ed
       with  the  numeric  value before any comparisons are done.
       Prepending a <b>u</b> to the type indicates that ordered  compar-
       isons should be unsigned.

       test   The  value  to  be compared with the value from the
              file.  If the type is numeric, this value is speci-
              fied  in C form; if it is a string, it is specified
              as a C string  with  the  usual  escapes  permitted
              (e.g. \n for new-line).

              Numeric values may be preceded by a character indi-
              cating the operation to be performed.  It may be <b>=</b>,
              to  specify that the value from the file must equal
              the specified value, <b>&lt;</b>, to specify that  the  value
              from  the  file  must  be  less  than the specified
              value, <b>&gt;</b>, to specify that the value from  the  file
              must  be  greater  than  the specified value, <b>&</b>, to
              specify that the value from the file must have  set
              all  of  the  bits  that  are  set in the specified
              value, <b>^</b>, to specify that the value from  the  file
              must have clear any of the bits that are set in the
              specified value, or <b>x</b>, to specify  that  any  value
              will  match.  If  the  character  is omitted, it is
              assumed to be <b>=</b>.

              Numeric values are specified in C form; e.g.  <b>13</b> is
              decimal, <b>013</b> is octal, and <b>0x13</b> is hexadecimal.

              For  string  values,  the byte string from the file
              must match the specified byte string.   The  opera-
              tors  <b>=</b>,  <b>&lt;</b>  and  <b>&gt;</b>  (but  not <b>&</b>) can be applied to
              strings.  The length used for matching is  that  of
              the  string argument in the magic file.  This means
              that a line can match any string, and then  presum-
              ably  print  that string, by doing <b>&gt;\0</b> (because all
              strings are greater than the null string).

       message
              The message to be printed if  the  comparison  suc-
              ceeds.   If the string contains a <b>printf</b>(3S) format
              specification, the value from the  file  (with  any
              specified  masking  performed) is printed using the
              message as the format string.

       Some file formats contain additional information which  is
       to  be  printed  along  with  the file type.  A line which
       begins with the character <b>&gt;</b> indicates additional tests and
       messages  to  be  printed.   The  number  of <b>&gt;</b> on the line
       indicates the level of the test; a line with no <b>&gt;</b>  at  the
       beginning  is  considered  to be at level 0.  Each line at
       level <i>n</i><b>+1</b> is under the control of the line at level <i>n</i> most
       closely  preceding it in the magic file.  If the test on a
       line at level <i>n</i> succeeds, the tests specified in  all  the
       subsequent  lines at level <i>n</i><b>+1</b> are performed, and the mes-
       sages printed if the tests  succeed.   The  next  line  at
       level <i>n</i> terminates this.  If the first character following
       the last <b>&gt;</b> is a <b>(</b> then the string after the parenthesis is
       interpreted  as  an  indirect offset.  That means that the
       number after the parenthesis is used as an offset  in  the
       file.  The value at that offset is read, and is used again
       as an offset in the file.  Indirect  offsets  are  of  the
       form:  <b>((</b><i>x</i><b>[.[bsl]][+-][</b><i>y</i><b>]).</b>   The value of <i>x</i> is used as an
       offset in the file. A byte, short or long is read at  that
       offset depending on the <b>[bsl]</b> type specifier. To that num-
       ber the value of <i>y</i> is added and the result is used  as  an
       offset  in the file. The default type if one is not speci-
       fied is long.

       Sometimes you do not know the exact offset as this depends
       on the length of preceding fields. You can specify an off-
       set relative to the end of  the  last  uplevel  field  (of
       course  this  may  only  be  done for sublevel tests, i.e.
       test beginning with <b>&gt;</b> ). Such a relative offset is  speci-
       fied using <b>&</b> as a prefix to the offset.

<H2>BUGS</H2>
       The formats <i>long</i>, <i>belong</i>, <i>lelong</i>, <i>short</i>, <i>beshort</i>, <i>leshort</i>,
       <i>date</i>, <i>bedate</i>, and  <i>ledate</i>  are  system-dependent;  perhaps
       they  should  be  specified  as a number of bytes (2B, 4B,
       etc), since the files being recognized typically come from
       a system on which the lengths are invariant.

       There  is (currently) no support for specified-endian data
       to be used in indirect offsets.

<H2>SEE ALSO</H2>
       <b>file</b>(1) - the command that reads this file.


</PRE>
